-- Create table statements are generated by readJason.py to help me write SQL quries and draw Relational Diagram, so column data type might be incorrect here
-- Since I was asked to generate queries before checking the data quality, I am assuming the data quality is clean and perfect, no missing data or wrong entries
-- SQL dialect: PostgresSQL(AWS redshift)
-- normalized data model, but in the real world a combine brands table with information from brands.json (includes both brands and products information) is common
-- Table: brands
CREATE TABLE brands
(
    brandCode    VARCHAR(50) PRIMARY KEY,  -- Primary key first
    category     VARCHAR(500),
    categoryCode VARCHAR(500),
    name         VARCHAR(500),
    topBrand     INT
);

-- Table: products
CREATE TABLE products (
    barcode             VARCHAR(500) PRIMARY KEY,   -- Primary key
    brandCode           VARCHAR(50) REFERENCES brands(brandCode)
    product_name        VARCHAR(500),
    description         VARCHAR(500),
    cpg                 VARCHAR(500)
);

-- Table: receipts
CREATE TABLE receipts
(
    receipts_id             VARCHAR(50) PRIMARY KEY,  -- Primary key first
    bonusPointsEarned       INT,
    bonusPointsEarnedReason VARCHAR(500),
    createDate              TIMESTAMP,
    dateScanned             TIMESTAMP,
    finishedDate            TIMESTAMP,
    modifyDate              TIMESTAMP,
    pointsAwardedDate       TIMESTAMP,
    pointsEarned            VARCHAR(500),
    purchaseDate            TIMESTAMP,
    purchasedItemCount      INT,
    rewardsReceiptStatus    VARCHAR(500),
    totalSpent              FLOAT,
    userId                  VARCHAR(500) REFERENCES users(users_id)
);

-- Table: ReceiptsRewardsReceiptItemList
CREATE TABLE ReceiptsRewardsReceiptItemList
(
    item_id                            BIGINT IDENTITY(1,1) PRIMARY KEY,  -- Primary key first
    barcode                            VARCHAR(500),
    brandCode                          VARCHAR(500),
    competitiveProduct                 INT,
    competitorRewardsGroup             VARCHAR(500),
    deleted                            INT,
    description                        VARCHAR(500),
    discountedItemPrice                VARCHAR(500),
    finalPrice                         FLOAT,
    itemNumber                         VARCHAR(500),
    itemPrice                          FLOAT,
    metabriteCampaignId                VARCHAR(500),
    needsFetchReview                   INT,
    needsFetchReviewReason             VARCHAR(500),
    originalFinalPrice                 VARCHAR(500),
    originalMetaBriteBarcode           VARCHAR(500),
    originalMetaBriteDescription       VARCHAR(500),
    originalMetaBriteItemPrice         VARCHAR(500),
    originalMetaBriteQuantityPurchased INT,
    originalReceiptItemText            VARCHAR(500),
    partnerItemId                      VARCHAR(500),
    pointsEarned                       FLOAT,
    pointsNotAwardedReason             VARCHAR(500),
    pointsPayerId                      VARCHAR(500),
    priceAfterCoupon                   VARCHAR(500),
    preventTargetGapPoints             INT,
    quantityPurchased                  INT,
    receipts_id                        VARCHAR(500) REFERENCES receipts (receipts_id),  -- Foreign key
    rewardsGroup                       VARCHAR(500),
    rewardsProductPartnerId            VARCHAR(500),
    targetPrice                        FLOAT,
    userFlaggedBarcode                 VARCHAR(500),
    userFlaggedDescription             VARCHAR(500),
    userFlaggedNewItem                 INT,
    userFlaggedPrice                   VARCHAR(500),
    userFlaggedQuantity                INT
);

-- Table: users
CREATE TABLE users
(
    users_id     VARCHAR(50) PRIMARY KEY,  -- Primary key first
    active       INT,
    createdDate  TIMESTAMP,
    lastLogin    TIMESTAMP,
    role         VARCHAR(500),
    signUpSource VARCHAR(500),
    state        VARCHAR(500)
);



-- What are the top 5 brands by receipts scanned for most recent month?
-- Assuming the most recent available month, even if the most recent month is not a full month.
-- On a live database the most recent month is the current month in this case
-- assuming brandcode is the join key and it is unique by brand
-- multiple items from the same brand on the same receipt are counted as one receipt scan for that brand
-- The brandCode in the brands.json file has alot missing values, so in the real world I would use barcode to join since it has 0 missing value

WITH
    recent_month_scanned_items AS (
    SELECT i.brandCode,
           r.receipts_id
        FROM receipts r
        JOIN ReceiptsRewardsReceiptItemList i ON r.receipts_id = i.receipts_id
        WHERE DATE_TRUNC('month', r.dateScanned) = (
                                                   SELECT DATE_TRUNC('month', MAX(dateScanned))
                                                       FROM receipts
                                                   )

 )

SELECT b.name AS brand_name, COUNT(DISTINCT r.receipts_id) AS receipt_count
    FROM brands b
    JOIN recent_month_scanned_items r ON b.brandCode = r.brandCode   -- we can also join with barcode
    GROUP BY b.name
    ORDER BY receipt_count DESC
    LIMIT 5;

-- How does the ranking of the top 5 brands by receipts scanned for the recent month compare to the ranking for the previous month?
-- assuming barcode is the join key and it is unique by item
-- assuming month are consecutive in the dataset
-- multiple items from the same brand on the same receipt are counted as one receipt scan for that brand

WITH
    last_two_month_scanned_items AS (
    SELECT
        brand_name
      , _month
      , rank() over (PARTITION BY _month ORDER BY receipts_count DESC) AS rnk
      , rank() over (ORDER BY _month DESC) AS month_rnk
        FROM (
             SELECT
                 b.name AS brand_name
               , date_trunc('month', r.dateScanned) AS _month
               , COUNT(DISTINCT r.receipts_id) AS receipts_count
                 FROM receipts r
                 JOIN ReceiptsRewardsReceiptItemList i ON r.receipts_id = i.receipts_id
                 JOIN brands b ON i.brandCode = b.brandCode
                 WHERE date_trunc('month', r.dateScanned) IN (
                                                            SELECT DISTINCT date_trunc('month', dateScanned) AS MONTH
                                                            FROM receipts
                                                            ORDER BY MONTH DESC limit 2
                                                            )
                 GROUP BY 1, 2
             ) a
),

top_5_recent AS (
SELECT
    brand_name
  , _month
  , rnk
  , receipts_count
    FROM last_two_month_scanned_items
    WHERE month_rnk = 1 AND rnk <= 5
),

previous_rnk AS (
SELECT
    brand_name
  , _month
  , rnk
  , receipts_count
    FROM last_two_month_scanned_items
    WHERE month_rnk = 2 AND brand_name IN (SELECT brand_name FROM top_5_recent)
)

SELECT
    r.brand_name
  , r.rnk AS recent_ranking
  , p.rnk AS previous_ranking
    FROM top_5_recent r
    LEFT JOIN previous_rnk p ON r.brand_name = p.brand_name
    ORDER BY recent_ranking;

-- When considering average spend from receipts with 'rewardsReceiptStatus’ of ‘Accepted’ or ‘Rejected’, which is greater?

SELECT
    UPPER(rewardsReceiptStatus) AS rewards_receipts_status
  , AVG(totalSpent) AS avg_spending
    FROM receipts
    WHERE LOWER(rewardsReceiptStatus) IN ('accepted', 'rejected')
    GROUP BY rewardsReceiptStatus
    ORDER BY avg_spending DESC
    LIMIT 1;

-- When considering total number of items purchased from receipts with 'rewardsReceiptStatus’ of ‘Accepted’ or ‘Rejected’, which is greater?
SELECT
    UPPER(rewardsReceiptStatus) AS rewards_receipts_status
  , SUM(purchasedItemCount) AS total_purchased
    FROM receipts
    WHERE LOWER(rewardsReceiptStatus) IN ('accepted', 'rejected')
    GROUP BY rewardsReceiptStatus
    ORDER BY total_purchased DESC
    LIMIT 1;

-- Which brand has the most spend among users who were created within the past 6 months?
-- Use finalPrice to calculate the spending here since I am not so sure if the itemPrice is the checkout price here

SELECT
    b.name AS brand_name
  , SUM(rrril.quantityPurchased * rrril.finalPrice) AS total_spending --Maybe use finalPrice if it means the checkout price
    FROM receipts r
    JOIN users u ON r.userId = u.users_id
    JOIN ReceiptsRewardsReceiptItemList rrril ON r.receipts_id = rrril.receipts_id
    JOIN brands b ON rrril.brandCode = b.brandCode
    WHERE u.createdDate >=  CURRENT_DATE - INTERVAL '6 months'
    GROUP BY b.name
    ORDER BY total_spending DESC limit 1;

-- Which brand has the most transactions among users who were created within the past 6 months?
-- One brand only counted once in one receipt (one receipt is one transaction)
WITH
    receipt_brand AS (
    SELECT DISTINCT b.name AS brand_name, rrril.receipts_id
    FROM brands b
    JOIN ReceiptsRewardsReceiptItemList rrril
    ON rrril.brandCode = b.brandCode
),

    receipts_user_last_6_month AS (
    SELECT r.receipts_id
    FROM users u
    JOIN receipts r ON r.userId = u.users_id
    WHERE u.createdDate >= CURRENT_DATE - INTERVAL '6 months'
)

SELECT
    b.brand_name
  , COUNT(DISTINCT b.receipts_id) AS total_transactions
    FROM receipt_brand b
    WHERE b.receipts_id IN (
                           SELECT receipts_id
                               FROM receipts_user_last_6_month
                           )
    GROUP BY b.brand_name
    ORDER BY total_transactions DESC limit 1;


